/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.1/userguide/building_java_projects.html
 * This project uses @Incubating APIs which are subject to change.
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        //jhipster-needle-gradle-buildscript-dependency - JHipster will add additional gradle build script plugins here
    }
}

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'jacoco'
    id 'maven-publish'
    id 'signing'
    id "com.diffplug.spotless" version "${spotlessPluginVersion}"
}

group = "io.github.survival1sm"
version = "0.0.1"
archivesBaseName = "spring-cloud-gateway-graphql-lace"

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'spring-cloud-gateway-graphql-lace'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'Spring Cloud Gateway GraphQL Lace'
                description = 'Automatically stitch GraphQL services into a single endpoint'
                url = 'https://github.com/Survival1sm/spring-cloud-gateway-graphql-lace'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'Survival1sm'
                        name = 'James Doyle'
                        email = 'james.r.doyle21@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/Survival1sm/spring-cloud-gateway-graphql-lace.git'
                    developerConnection = 'scm:git:ssh://github.com/Survival1sm/spring-cloud-gateway-graphql-lace.git'
                    url = 'https://github.com/Survival1sm/spring-cloud-gateway-graphql-lace/'
                }
            }
        }
    }
    repositories {
        maven {
            url = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials(PasswordCredentials)
        }
    }
}

signing {
   // sign publishing.publications.mavenJava
}


repositories {
    mavenCentral()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    implementation 'org.springframework.cloud:spring-cloud-gateway-server:3.0.3'
    implementation 'org.springframework.security:spring-security-oauth2-client:5.4.6'
    implementation 'org.springframework.boot:spring-boot-autoconfigure:2.4.7'
    implementation 'org.springframework:spring-webflux:5.3.8'
    implementation 'org.springframework:spring-web:5.3.8'

    implementation 'com.intuit.graphql:graphql-orchestrator-java:5.0.22'
    implementation 'net.minidev:json-smart:2.5.0'

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:2.4.7"

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:31.1-jre'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit Jupiter test framework
            useJUnitJupiter('5.9.1')
        }
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    withJavadocJar()
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

jacocoTestReport {
    reports {
        xml {
            required.set(true)
        }
        html {
            required.set(true)
        }
    }
}

spotless {
    java {
        googleJavaFormat()
        formatAnnotations()
    }
}

test.finalizedBy jacocoTestReport
